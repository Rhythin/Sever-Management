// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rhythin/sever-management/internal/domain"
	mock "github.com/stretchr/testify/mock"

	persistence "github.com/rhythin/sever-management/internal/persistence"
)

// ServerService is an autogenerated mock type for the ServerService type
type ServerService struct {
	mock.Mock
}

// Action provides a mock function with given fields: ctx, id, action
func (_m *ServerService) Action(ctx context.Context, id string, action domain.ServerAction) error {
	ret := _m.Called(ctx, id, action)

	if len(ret) == 0 {
		panic("no return value specified for Action")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ServerAction) error); ok {
		r0 = rf(ctx, id, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvents provides a mock function with given fields: ctx, id, n
func (_m *ServerService) GetEvents(ctx context.Context, id string, n int) ([]persistence.EventLog, error) {
	ret := _m.Called(ctx, id, n)

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 []persistence.EventLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]persistence.EventLog, error)); ok {
		return rf(ctx, id, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []persistence.EventLog); ok {
		r0 = rf(ctx, id, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persistence.EventLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, id, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerByID provides a mock function with given fields: ctx, id
func (_m *ServerService) GetServerByID(ctx context.Context, id string) (*persistence.Server, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetServerByID")
	}

	var r0 *persistence.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*persistence.Server, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *persistence.Server); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServers provides a mock function with given fields: ctx, region, status, typ, limit, offset
func (_m *ServerService) ListServers(ctx context.Context, region string, status string, typ string, limit int, offset int) ([]*persistence.Server, error) {
	ret := _m.Called(ctx, region, status, typ, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListServers")
	}

	var r0 []*persistence.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) ([]*persistence.Server, error)); ok {
		return rf(ctx, region, status, typ, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) []*persistence.Server); ok {
		r0 = rf(ctx, region, status, typ, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*persistence.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, int) error); ok {
		r1 = rf(ctx, region, status, typ, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provision provides a mock function with given fields: ctx, region, typ
func (_m *ServerService) Provision(ctx context.Context, region string, typ string) (string, error) {
	ret := _m.Called(ctx, region, typ)

	if len(ret) == 0 {
		panic("no return value specified for Provision")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, region, typ)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, region, typ)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, region, typ)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServerService creates a new instance of ServerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerService {
	mock := &ServerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

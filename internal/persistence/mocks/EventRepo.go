// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	persistence "github.com/rhythin/sever-management/internal/persistence"
	mock "github.com/stretchr/testify/mock"
)

// EventRepo is an autogenerated mock type for the EventRepo type
type EventRepo struct {
	mock.Mock
}

// Append provides a mock function with given fields: ctx, event
func (_m *EventRepo) Append(ctx context.Context, event *persistence.EventLog) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *persistence.EventLog) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LastN provides a mock function with given fields: ctx, serverID, n
func (_m *EventRepo) LastN(ctx context.Context, serverID string, n int) ([]persistence.EventLog, error) {
	ret := _m.Called(ctx, serverID, n)

	if len(ret) == 0 {
		panic("no return value specified for LastN")
	}

	var r0 []persistence.EventLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]persistence.EventLog, error)); ok {
		return rf(ctx, serverID, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []persistence.EventLog); ok {
		r0 = rf(ctx, serverID, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persistence.EventLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, serverID, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventRepo creates a new instance of EventRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventRepo {
	mock := &EventRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

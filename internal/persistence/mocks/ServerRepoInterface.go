// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	persistence "github.com/rhythin/sever-management/internal/persistence"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ServerRepoInterface is an autogenerated mock type for the ServerRepoInterface type
type ServerRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, server
func (_m *ServerRepoInterface) Create(ctx context.Context, server *persistence.Server) error {
	ret := _m.Called(ctx, server)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *persistence.Server) error); ok {
		r0 = rf(ctx, server)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ServerRepoInterface) GetByID(ctx context.Context, id string) (*persistence.Server, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *persistence.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*persistence.Server, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *persistence.Server); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, region, status, typ, limit, offset
func (_m *ServerRepoInterface) List(ctx context.Context, region string, status string, typ string, limit int, offset int) ([]*persistence.Server, error) {
	ret := _m.Called(ctx, region, status, typ, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*persistence.Server
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) ([]*persistence.Server, error)); ok {
		return rf(ctx, region, status, typ, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) []*persistence.Server); ok {
		r0 = rf(ctx, region, status, typ, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*persistence.Server)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, int) error); ok {
		r1 = rf(ctx, region, status, typ, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBilling provides a mock function with given fields: ctx, id, accumulatedSeconds, totalCost
func (_m *ServerRepoInterface) UpdateBilling(ctx context.Context, id string, accumulatedSeconds int64, totalCost float64) error {
	ret := _m.Called(ctx, id, accumulatedSeconds, totalCost)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBilling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, float64) error); ok {
		r0 = rf(ctx, id, accumulatedSeconds, totalCost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServer provides a mock function with given fields: ctx, id, updates
func (_m *ServerRepoInterface) UpdateServer(ctx context.Context, id string, updates *persistence.Server) error {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *persistence.Server) error); ok {
		r0 = rf(ctx, id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateState provides a mock function with given fields: ctx, id, state
func (_m *ServerRepoInterface) UpdateState(ctx context.Context, id string, state string) error {
	ret := _m.Called(ctx, id, state)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTimestamps provides a mock function with given fields: ctx, id, started, stopped, terminated
func (_m *ServerRepoInterface) UpdateTimestamps(ctx context.Context, id string, started *time.Time, stopped *time.Time, terminated *time.Time) error {
	ret := _m.Called(ctx, id, started, stopped, terminated)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTimestamps")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time, *time.Time, *time.Time) error); ok {
		r0 = rf(ctx, id, started, stopped, terminated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServerRepoInterface creates a new instance of ServerRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerRepoInterface {
	mock := &ServerRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

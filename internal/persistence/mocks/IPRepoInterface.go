// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	persistence "github.com/rhythin/sever-management/internal/persistence"
	mock "github.com/stretchr/testify/mock"
)

// IPRepoInterface is an autogenerated mock type for the IPRepoInterface type
type IPRepoInterface struct {
	mock.Mock
}

// AllocateIP provides a mock function with given fields: ctx
func (_m *IPRepoInterface) AllocateIP(ctx context.Context) (*persistence.IPAddress, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllocateIP")
	}

	var r0 *persistence.IPAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*persistence.IPAddress, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *persistence.IPAddress); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*persistence.IPAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignIPToServer provides a mock function with given fields: ctx, ipID, serverID
func (_m *IPRepoInterface) AssignIPToServer(ctx context.Context, ipID uint, serverID string) error {
	ret := _m.Called(ctx, ipID, serverID)

	if len(ret) == 0 {
		panic("no return value specified for AssignIPToServer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, ipID, serverID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseIP provides a mock function with given fields: ctx, id
func (_m *IPRepoInterface) ReleaseIP(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseIP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIPRepoInterface creates a new instance of IPRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPRepoInterface {
	mock := &IPRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
